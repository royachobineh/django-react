{"ast":null,"code":"import * as types from './constants';\nimport http from '../utils/http';\nexport const fetchLocations = async dispatch => {\n  try {\n    const {\n      data\n    } = await http.get('/user/location/');\n    dispatch({\n      type: types.RECEIVED_LOCATIONS,\n      payload: data\n    });\n  } catch (ex) {\n    console.error(ex.message);\n  }\n};\nexport const loginUser = async (dispatch, payload) => {\n  try {\n    const {\n      data\n    } = await http.post('/user/login/', payload);\n    dispatch({\n      type: types.SET_USER,\n      payload: data\n    });\n    http.defaults.headers.common.Authorization = `JWT ${data.token}`;\n  } catch (ex) {\n    console.error(ex.message);\n  }\n};\nexport const registerUser = async (dispatch, payload) => {\n  try {\n    const {\n      data\n    } = await http.post('/user/register/', payload);\n    dispatch({\n      type: types.SET_USER,\n      payload: data\n    });\n  } catch (ex) {\n    console.error(ex.message);\n  }\n};\nexport const logoutUser = dispatch => {\n  dispatch({\n    type: types.SET_USER,\n    payload: null\n  });\n};\nexport const validateToken = async (dispatch, token) => {\n  try {\n    if (token) {\n      const {\n        data\n      } = await http.post('/user/api-token-verify/', {\n        token\n      });\n      dispatch({\n        type: types.SET_USER,\n        payload: data\n      });\n    }\n  } catch (ex) {} finally {\n    dispatch({\n      type: types.SET_LOAD_STATUS,\n      payload: false\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Roya/Downloads/django-react/react-app/src/store/actions.js"],"names":["types","http","fetchLocations","dispatch","data","get","type","RECEIVED_LOCATIONS","payload","ex","console","error","message","loginUser","post","SET_USER","defaults","headers","common","Authorization","token","registerUser","logoutUser","validateToken","SET_LOAD_STATUS"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAMC,QAAN,IAAkB;AAC9C,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,IAAI,CAACI,GAAL,CAAS,iBAAT,CAAvB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,KAAK,CAACO,kBAAd;AAAkCC,MAAAA,OAAO,EAAEJ;AAA3C,KAAD,CAAR;AACD,GAHD,CAGE,OAAOK,EAAP,EAAW;AACXC,IAAAA,OAAO,CAACC,KAAR,CAAcF,EAAE,CAACG,OAAjB;AACD;AACF,CAPM;AASP,OAAO,MAAMC,SAAS,GAAG,OAAOV,QAAP,EAAiBK,OAAjB,KAA6B;AACpD,MAAI;AACF,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMH,IAAI,CAACa,IAAL,CAAU,cAAV,EAA0BN,OAA1B,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,KAAK,CAACe,QAAd;AAAwBP,MAAAA,OAAO,EAAEJ;AAAjC,KAAD,CAAR;AACAH,IAAAA,IAAI,CAACe,QAAL,CAAcC,OAAd,CAAsBC,MAAtB,CAA6BC,aAA7B,GAA8C,OAAMf,IAAI,CAACgB,KAAM,EAA/D;AACD,GAJD,CAIE,OAAOX,EAAP,EAAW;AACXC,IAAAA,OAAO,CAACC,KAAR,CAAcF,EAAE,CAACG,OAAjB;AACD;AACF,CARM;AAUP,OAAO,MAAMS,YAAY,GAAG,OAAOlB,QAAP,EAAiBK,OAAjB,KAA6B;AACvD,MAAI;AACF,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMH,IAAI,CAACa,IAAL,CAAU,iBAAV,EAA6BN,OAA7B,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,KAAK,CAACe,QAAd;AAAwBP,MAAAA,OAAO,EAAEJ;AAAjC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOK,EAAP,EAAW;AACXC,IAAAA,OAAO,CAACC,KAAR,CAAcF,EAAE,CAACG,OAAjB;AACD;AACF,CAPM;AASP,OAAO,MAAMU,UAAU,GAAGnB,QAAQ,IAAI;AACpCA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEN,KAAK,CAACe,QAAd;AAAwBP,IAAAA,OAAO,EAAE;AAAjC,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMe,aAAa,GAAG,OAAOpB,QAAP,EAAiBiB,KAAjB,KAA2B;AACtD,MAAI;AACF,QAAIA,KAAJ,EAAW;AACT,YAAM;AAAEhB,QAAAA;AAAF,UAAW,MAAMH,IAAI,CAACa,IAAL,CAAU,yBAAV,EAAqC;AAAEM,QAAAA;AAAF,OAArC,CAAvB;AACAjB,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEN,KAAK,CAACe,QAAd;AAAwBP,QAAAA,OAAO,EAAEJ;AAAjC,OAAD,CAAR;AACD;AACF,GALD,CAKE,OAAOK,EAAP,EAAW,CACZ,CAND,SAMU;AACRN,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,KAAK,CAACwB,eAAd;AAA+BhB,MAAAA,OAAO,EAAE;AAAxC,KAAD,CAAR;AACD;AACF,CAVM","sourcesContent":["import * as types from './constants';\nimport http from '../utils/http';\n\nexport const fetchLocations = async dispatch => {\n  try {\n    const { data } = await http.get('/user/location/');\n    dispatch({ type: types.RECEIVED_LOCATIONS, payload: data });\n  } catch (ex) {\n    console.error(ex.message);\n  }\n};\n\nexport const loginUser = async (dispatch, payload) => {\n  try {\n    const { data } = await http.post('/user/login/', payload);\n    dispatch({ type: types.SET_USER, payload: data });\n    http.defaults.headers.common.Authorization = `JWT ${data.token}`;\n  } catch (ex) {\n    console.error(ex.message);\n  }\n};\n\nexport const registerUser = async (dispatch, payload) => {\n  try {\n    const { data } = await http.post('/user/register/', payload);\n    dispatch({ type: types.SET_USER, payload: data });\n  } catch (ex) {\n    console.error(ex.message);\n  }\n};\n\nexport const logoutUser = dispatch => {\n  dispatch({ type: types.SET_USER, payload: null });\n};\n\nexport const validateToken = async (dispatch, token) => {\n  try {\n    if (token) {\n      const { data } = await http.post('/user/api-token-verify/', { token });\n      dispatch({ type: types.SET_USER, payload: data });\n    }\n  } catch (ex) {\n  } finally {\n    dispatch({ type: types.SET_LOAD_STATUS, payload: false });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}