{"ast":null,"code":"var _jsxFileName = \"/Users/Roya/Downloads/django-react/react-app/src/components/map.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Map = props => {\n  _s();\n\n  var _props$markers;\n\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    defaultZoom: 10,\n    defaultCenter: {\n      lat: 23.777176,\n      lng: 90.399452\n    },\n    children: [(_props$markers = props.markers) === null || _props$markers === void 0 ? void 0 : _props$markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: parseFloat(marker.latitude),\n        lng: parseFloat(marker.longitude)\n      },\n      onClick: () => setSelectedMarker(marker)\n    }, `${marker.latitude}${marker.longitude}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n      onCloseClick: () => setSelectedMarker(null),\n      position: {\n        lat: parseFloat(selectedMarker.latitude),\n        lng: parseFloat(selectedMarker.longitude)\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: selectedMarker.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"oar+iP7gTM7tKhZHtq+2gG1qrA4=\");\n\n_c = Map;\nconst WrappedMap = withScriptjs(_c2 = withGoogleMap(Map));\n_c3 = WrappedMap;\nexport default WrappedMap;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"WrappedMap$withScriptjs\");\n$RefreshReg$(_c3, \"WrappedMap\");","map":{"version":3,"sources":["/Users/Roya/Downloads/django-react/react-app/src/components/map.jsx"],"names":["useState","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","Map","props","selectedMarker","setSelectedMarker","lat","lng","markers","map","marker","parseFloat","latitude","longitude","name","WrappedMap"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,mBANP;;;AAQA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA;;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,IAAD,CAApD;AAEA,sBACE,QAAC,SAAD;AACE,IAAA,WAAW,EAAE,EADf;AAEE,IAAA,aAAa,EAAE;AAAEU,MAAAA,GAAG,EAAE,SAAP;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAFjB;AAAA,iCAIGJ,KAAK,CAACK,OAJT,mDAIG,eAAeC,GAAf,CAAmBC,MAAM,iBACxB,QAAC,MAAD;AAEE,MAAA,QAAQ,EAAE;AACRJ,QAAAA,GAAG,EAAEK,UAAU,CAACD,MAAM,CAACE,QAAR,CADP;AAERL,QAAAA,GAAG,EAAEI,UAAU,CAACD,MAAM,CAACG,SAAR;AAFP,OAFZ;AAME,MAAA,OAAO,EAAE,MAAMR,iBAAiB,CAACK,MAAD;AANlC,OACQ,GAAEA,MAAM,CAACE,QAAS,GAAEF,MAAM,CAACG,SAAU,EAD7C;AAAA;AAAA;AAAA;AAAA,YADD,CAJH,EAeGT,cAAc,iBACb,QAAC,UAAD;AACE,MAAA,YAAY,EAAE,MAAMC,iBAAiB,CAAC,IAAD,CADvC;AAEE,MAAA,QAAQ,EAAE;AACRC,QAAAA,GAAG,EAAEK,UAAU,CAACP,cAAc,CAACQ,QAAhB,CADP;AAERL,QAAAA,GAAG,EAAEI,UAAU,CAACP,cAAc,CAACS,SAAhB;AAFP,OAFZ;AAAA,6BAOE;AAAA,+BACE;AAAA,oBAAKT,cAAc,CAACU;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAlCD;;GAAMZ,G;;KAAAA,G;AAoCN,MAAMa,UAAU,GAAGlB,YAAY,OAACC,aAAa,CAACI,GAAD,CAAd,CAA/B;MAAMa,U;AAEN,eAAeA,UAAf","sourcesContent":["import { useState } from 'react';\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n} from 'react-google-maps';\n\nconst Map = props => {\n  const [selectedMarker, setSelectedMarker] = useState(null);\n\n  return (\n    <GoogleMap\n      defaultZoom={10}\n      defaultCenter={{ lat: 23.777176, lng: 90.399452 }}\n    >\n      {props.markers?.map(marker => (\n        <Marker\n          key={`${marker.latitude}${marker.longitude}`}\n          position={{\n            lat: parseFloat(marker.latitude),\n            lng: parseFloat(marker.longitude),\n          }}\n          onClick={() => setSelectedMarker(marker)}\n        />\n      ))}\n\n      {selectedMarker && (\n        <InfoWindow\n          onCloseClick={() => setSelectedMarker(null)}\n          position={{\n            lat: parseFloat(selectedMarker.latitude),\n            lng: parseFloat(selectedMarker.longitude),\n          }}\n        >\n          <div>\n            <h4>{selectedMarker.name}</h4>\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n};\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nexport default WrappedMap;\n"]},"metadata":{},"sourceType":"module"}